npm init -y
/////////////////////////////////////////////////
04:20 -      [BACKEND] - Начало
https://www.youtube.com/watch?v=H2GCkRF9eko&t=260s
создать index.js
//--- инициализировать проект BACKEND
в терминале \server> npm init -y 
//--- установка зависимостей в \server> 
npm i express pg pg-hstore sequelize cors dotenv
//--- установка зависимостей только для разработки в \server>
npm i -D nodemon
//--- скрипт для запуска сервера в файле package.json
"dev": "nodemon index.js"
//---структура приложения
//--- импорт модуля express
const express = require('express')
//--- создание объекта вызовом функции express
const app = express();
//---вызов метода listen
app.listen(PORT, () => callback)
//---запуск сервера
npm run dev
//---выводится сообщение при удачном запуске
START SERVER ON PORT 5000
//--- имппорт config из 'dotenv'
require('dotenv').config()
//--- создать файл .env
//--- получение значений через окружение
const PORT = process.env.PORT || 5000;

//////////////////////////////////////////////////
07:56 -      [BACKEND] - Подключение к базе данных
https://www.youtube.com/watch?v=H2GCkRF9eko&t=476s
//--- конфигурирование подключения к базе данных
//--- создание файла db.js
//--- импорт sequelize
const {sequelize} = require('sequelize')
//--- экспорт объекта из этого класса
module.exports = new Sequelize();
//--- создание и подключение к базе данных через pgAdmin
//--- константы в файле .env
DB_NAME = online-store
DB_USER = user
DB_PASSWORD = user
DB_HOST = localhost
DB_PORT = 5433
//--- модуль подключения к БД
module.exports = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    dialect: 'postgres',
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
  }
);
//--- импорт объекта модуля из db.js в index.js
const sequelize = require('./db');
// вызов асинхронной функции для подключения к БД
const start = async () => {
  try {
  } catch (e) {}
};
// sequelize.authenticate();
//    await sequelize.sync();

////////////////////////////////////////////////
11:30 -      [BACKEND] - Строим диаграмму базы данных
https://www.youtube.com/watch?v=H2GCkRF9eko&t=690s

//////////////////////////////////////////////////
16:50 -      [BACKEND] - Модели данных и связи между ними
//--- создание папки models и файла models.js
//--- перенос структуры БД в model создание связей
//--- импорт sequelize из db.js в module.js
const {sequelize} = require('db.js')
//--- импорт из самого sequelize класс DataTypes
const {DataTypes} = require('sequelize')
//--- описание модели пользователя sequelize.define()
//--- первый параметр имя модели >> user
//--- второй- объект описание структуры полей таблицы
id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
//--- и так далее всех полей всех таблиц
User
BasketDevice
Device
Type
Brand
Rating
DeviceInfo
TypeBrand
//--- описание связей между таблицами >>  hasOne  ||  hasMany
User.hasOne(Basket)
Basket.belongsTo(User)
//---
User.hasMany(Rating)
Rating.belongsTo(User)
//--- export all modules
module.exports = {
  User,
  Basket,
  BasketDevice,
  Device,
  Type,
  Brand,
  Rating,
  TypeBrand,
  DeviceInfo,
};
//--- import modules in the index.js
const models = require('./models/models')
// запуск >> start()
DB_USER = postgres // <- DB_USER = user
//--- настройка cors
//--- import
const cors = require('cors')
//---передаем в функцию app.use()
//--- cors()
app.use(cors())
//---express.json()
app.use(express.json())
//--- создание пробноно get запроса
app.get('/', (req, res) => {
  res.status(200).json({ message: 'WORKING!!!' });
});
//--- в браузере по http://localhost:7000/
//--- выведется сообщение
"WORKING!!!"
//--- дальнейшее тестирование через Postman

////////////////////////////////////////////////
25:30 -      [BACKEND] - Роутинг и эндпоинты
//---
// создание структуры папок и файлов
routes
index.js
userRouter.js
deviceRouter.js
brandRouter.js
typeRouter.js
//--- в index.js создаем Router
const Router = require('express');
//--- и создаем объект этого роутера
const router = new Router();
//
//--- для файла userRouter
//--- создаем Router
const Router = require('express')
//--- и создаем объект этого роутера
const router = new Router()
//--- метод регистрации
router.post('/registration', userController.registration)
//--- метод авторизации
router.post('/login', userController.login)
//--- проверка авторизации
router.get('/auth', authMiddleware, userController.check)
//--- export 
module.exports = router
//
//--- для файла brandRouter
const Router = require('express')
const router = new Router()
//--- создание бренда
router.post('/', brandController.create)
//--- получение всех брендов
router.get('/', brandController.getAll)
//--- 
module.exports = router
//--- аналогично для typeRouter
//--- для deviceRouter
//--- импортируем все созданные роутеры в routes/index.js